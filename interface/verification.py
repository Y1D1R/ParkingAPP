# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'verification.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import requests
import numpy as np
import imutils
import cv2 as cv
import matplotlib.pyplot as plt
import glob

from RecupPhoto import Sift_detector
class Verification(object):
    def setupUi(self, UI):
        UI.setObjectName("UI")
        UI.resize(656, 468)
        UI.setStyleSheet("QWidget#UI\n"
"{background-color:qlineargradient(spread:pad, x1:0.085, y1:0.352364, x2:0.9, y2:0.630364, stop:0.285 rgba(5, 190, 177, 255), stop:1 rgba(255, 255, 255, 255));}")
        self.centralwidget = QtWidgets.QWidget(UI)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 270, 161, 41))
        self.pushButton.setStyleSheet("background-color: rgb(53, 161, 161);\n"
"    color:white;\n"
"    border-style: outset;\n"
"    border-radius: 10px;\n"
"    font: 75 16pt \"Tw Cen MT\";")
        self.pushButton.setObjectName("pushButton")
        self.resultat = QtWidgets.QLabel(self.centralwidget)
        self.resultat.setGeometry(QtCore.QRect(320, 330, 141, 31))
        self.resultat.setText("")
        self.resultat.setObjectName("resultat")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(160, 330, 131, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_result.setFont(font)
        self.label_result.setObjectName("label_result")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 98, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.url = QtWidgets.QLineEdit(self.centralwidget)
        self.url.setGeometry(QtCore.QRect(250, 100, 181, 20))
        self.url.setText("")
        self.url.setObjectName("url")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 220, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(210, 220, 201, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(450, 220, 75, 23))
        self.pushButton_2.setStyleSheet("background-color: rgb(53, 161, 161);\n"
"    color:white;\n"
"    border-style: outset;\n"
"    border-radius: 10px;\n"
"    font: 75 16pt \"Tw Cen MT\";")
        self.pushButton_2.setObjectName("pushButton_2")
        self.bnt_photo = QtWidgets.QPushButton(self.centralwidget)
        self.bnt_photo.setGeometry(QtCore.QRect(240, 150, 171, 31))
        self.bnt_photo.setStyleSheet("background-color: rgb(53, 161, 161);\n"
"    color:white;\n"
"    border-style: outset;\n"
"    border-radius: 10px;\n"
"    font: 75 16pt \"Tw Cen MT\";")
        self.bnt_photo.setObjectName("bnt_photo")
        UI.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(UI)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 656, 21))
        self.menubar.setObjectName("menubar")
        UI.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(UI)
        self.statusbar.setObjectName("statusbar")
        UI.setStatusBar(self.statusbar)

        self.retranslateUi(UI)
        QtCore.QMetaObject.connectSlotsByName(UI)
        self.bnt_photo.clicked.connect(self.PrendrePhoto)
        self.pushButton_2.clicked.connect(self.ChercherFiles)
        self.pushButton.clicked.connect(self.Sift)
    def retranslateUi(self, UI):
        _translate = QtCore.QCoreApplication.translate
        UI.setWindowTitle(_translate("UI", "MainWindow"))
        self.pushButton.setText(_translate("UI", "Verification"))
        self.label.setText(_translate("UI", "Verification du véhicule"))
        self.label_result.setText(_translate("UI", "Resultat verfication :"))
        self.label_2.setText(_translate("UI", "URL de la camera : "))
        self.label_3.setText(_translate("UI", "charger image"))
        self.pushButton_2.setText(_translate("UI", "charger"))
        self.bnt_photo.setText(_translate("UI", "Prendre une Photo"))
    def PrendrePhoto(self):
        #Faire appel à la fonction sift_detector
        ##commence par avoir url de la camera
        cameraurl = self.url.text()
        ##Ouvrire une vidéo
        while True:
            img_resp = requests.get(cameraurl)
            img_arr = np.array(bytearray(img_resp.content),dtype=np.uint8)
            img = cv.imdecode(img_arr, -1)
            img = imutils.resize(img, width=900, height=1800)
            cv.imshow("Camera Du Parking",img)

            if cv.waitKey(1) == 27:
                cv.imwrite('output.jpg', img)
                cv.destroyAllWindows()
                break
    def ChercherFiles(self):
        file , check = QtWidgets.QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                               "", "All Files (*);;Python Files (*.py);;Text Files (*.txt)")
        if check:
            print(file)
            self.lineEdit.setText(file)
    def Sift(self):
        queries = [cv.imread(file) for file in glob.glob("queries\*.png")]
        queries = np.array(queries)
        image_link = self.lineEdit.text()
        if Sift_detector(queries,cv.imread(image_link)) == True:
            self.resultat.setText("Acces autoriser")
        else:
            self.resultat.setText("Acces non autoriser")

    
if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Verification()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())