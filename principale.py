# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'principale.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from ast import Return
import sys
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog,QApplication,QFileDialog
from PyQt5.uic import loadUi
import requests
import numpy as np
import imutils
import cv2 as cv
import matplotlib.pyplot as plt
import glob
import csv
from pathlib import Path
import pandas as pd
import os
from datetime import date, datetime
    
class Ui_principale(object):
         
    def setupUi(self, principale):
        principale.setObjectName("principale")
        principale.resize(692, 511)
        self.formLayout = QtWidgets.QFormLayout(principale)
        self.formLayout.setObjectName("formLayout")
        self.tabWidget = QtWidgets.QTabWidget(principale)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.17, y1:0.154, x2:1, y2:1, stop:0 rgba(0, 0, 74, 255), stop:1 rgba(170, 255, 255, 255));")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(20, 20))
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setObjectName("tabWidget")
        self.verification_tab = QtWidgets.QWidget()
        self.verification_tab.setObjectName("verification_tab")
        self.label = QtWidgets.QLabel(self.verification_tab)
        self.label.setGeometry(QtCore.QRect(160, 20, 321, 41))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("border-radius:16px;\n"
"background-color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.label_4 = QtWidgets.QLabel(self.verification_tab)
        self.label_4.setGeometry(QtCore.QRect(50, 140, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.ip_txt = QtWidgets.QLineEdit(self.verification_tab)
        self.ip_txt.setGeometry(QtCore.QRect(190, 130, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.ip_txt.setFont(font)
        self.ip_txt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.ip_txt.setObjectName("ip_txt")
        self.dossier_txt = QtWidgets.QLineEdit(self.verification_tab)
        self.dossier_txt.setGeometry(QtCore.QRect(190, 200, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(10)
        self.dossier_txt.setFont(font)
        self.dossier_txt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.dossier_txt.setText("")
        self.dossier_txt.setObjectName("dossier_txt")
        self.choisir = QtWidgets.QPushButton(self.verification_tab)
        self.choisir.setGeometry(QtCore.QRect(490, 210, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.choisir.setFont(font)
        self.choisir.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.choisir.setObjectName("choisir")
        self.verifier = QtWidgets.QPushButton(self.verification_tab)
        self.verifier.setGeometry(QtCore.QRect(280, 310, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.verifier.setFont(font)
        self.verifier.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.verifier.setObjectName("verifier")
        self.label_8 = QtWidgets.QLabel(self.verification_tab)
        self.label_8.setGeometry(QtCore.QRect(50, 200, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_8.setObjectName("label_8")
        self.tabWidget.addTab(self.verification_tab, "")
        self.gestion_tab = QtWidgets.QWidget()
        self.gestion_tab.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.17, y1:0.154, x2:1, y2:1, stop:0 rgba(0, 0, 74, 255), stop:1 rgba(170, 255, 255, 255));")
        self.gestion_tab.setObjectName("gestion_tab")
        self.label_2 = QtWidgets.QLabel(self.gestion_tab)
        self.label_2.setGeometry(QtCore.QRect(180, 20, 271, 41))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setStyleSheet("border-radius:16px;\n"
"background-color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.gestion = QtWidgets.QTabWidget(self.gestion_tab)
        self.gestion.setGeometry(QtCore.QRect(0, 80, 701, 391))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(11)
        self.gestion.setFont(font)
        self.gestion.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.17, y1:0.154, x2:1, y2:1, stop:0 rgba(0, 0, 74, 255), stop:1 rgba(170, 255, 255, 255));")
        self.gestion.setObjectName("gestion")
        self.gestion_ajouter = QtWidgets.QWidget()
        self.gestion_ajouter.setObjectName("gestion_ajouter")
        self.nom_txt_ajt = QtWidgets.QLineEdit(self.gestion_ajouter)
        self.nom_txt_ajt.setGeometry(QtCore.QRect(180, 30, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.nom_txt_ajt.setFont(font)
        self.nom_txt_ajt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.nom_txt_ajt.setText("")
        self.nom_txt_ajt.setObjectName("nom_txt_ajt")
        self.label_5 = QtWidgets.QLabel(self.gestion_ajouter)
        self.label_5.setGeometry(QtCore.QRect(60, 40, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.gestion_ajouter)
        self.label_6.setGeometry(QtCore.QRect(60, 100, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_6.setObjectName("label_6")
        self.prenom_txt_ajt = QtWidgets.QLineEdit(self.gestion_ajouter)
        self.prenom_txt_ajt.setGeometry(QtCore.QRect(180, 90, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.prenom_txt_ajt.setFont(font)
        self.prenom_txt_ajt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.prenom_txt_ajt.setText("")
        self.prenom_txt_ajt.setObjectName("prenom_txt_ajt")
        self.matricule_txt_ajt = QtWidgets.QLineEdit(self.gestion_ajouter)
        self.matricule_txt_ajt.setGeometry(QtCore.QRect(180, 150, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.matricule_txt_ajt.setFont(font)
        self.matricule_txt_ajt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.matricule_txt_ajt.setText("")
        self.matricule_txt_ajt.setObjectName("matricule_txt_ajt")
        self.label_7 = QtWidgets.QLabel(self.gestion_ajouter)
        self.label_7.setGeometry(QtCore.QRect(60, 160, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_7.setObjectName("label_7")
        self.dossier_txt_ajt = QtWidgets.QLineEdit(self.gestion_ajouter)
        self.dossier_txt_ajt.setGeometry(QtCore.QRect(180, 210, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(10)
        self.dossier_txt_ajt.setFont(font)
        self.dossier_txt_ajt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.dossier_txt_ajt.setText("")
        self.dossier_txt_ajt.setObjectName("dossier_txt_ajt")
        self.choisir_ajt = QtWidgets.QPushButton(self.gestion_ajouter)
        self.choisir_ajt.setGeometry(QtCore.QRect(490, 220, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.choisir_ajt.setFont(font)
        self.choisir_ajt.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.choisir_ajt.setObjectName("choisir_ajt")
        self.ajouter = QtWidgets.QPushButton(self.gestion_ajouter)
        self.ajouter.setGeometry(QtCore.QRect(260, 270, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.ajouter.setFont(font)
        self.ajouter.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.ajouter.setObjectName("ajouter")
        self.label_9 = QtWidgets.QLabel(self.gestion_ajouter)
        self.label_9.setGeometry(QtCore.QRect(40, 210, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.gestion.addTab(self.gestion_ajouter, "")
        self.gestion_supprimer = QtWidgets.QWidget()
        self.gestion_supprimer.setObjectName("gestion_supprimer")
        self.matricule_txt_supp = QtWidgets.QLineEdit(self.gestion_supprimer)
        self.matricule_txt_supp.setGeometry(QtCore.QRect(170, 60, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.matricule_txt_supp.setFont(font)
        self.matricule_txt_supp.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.matricule_txt_supp.setText("")
        self.matricule_txt_supp.setObjectName("matricule_txt_supp")
        self.label_10 = QtWidgets.QLabel(self.gestion_supprimer)
        self.label_10.setGeometry(QtCore.QRect(50, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_10.setObjectName("label_10")
        self.supprimer = QtWidgets.QPushButton(self.gestion_supprimer)
        self.supprimer.setGeometry(QtCore.QRect(270, 200, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.supprimer.setFont(font)
        self.supprimer.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.supprimer.setObjectName("supprimer")
        self.gestion.addTab(self.gestion_supprimer, "")
        self.gestio_modifier = QtWidgets.QWidget()
        self.gestio_modifier.setObjectName("gestio_modifier")
        self.matricule_txt_modifier = QtWidgets.QLineEdit(self.gestio_modifier)
        self.matricule_txt_modifier.setGeometry(QtCore.QRect(220, 40, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.matricule_txt_modifier.setFont(font)
        self.matricule_txt_modifier.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.matricule_txt_modifier.setText("")
        self.matricule_txt_modifier.setObjectName("matricule_txt_modifier")
        self.label_11 = QtWidgets.QLabel(self.gestio_modifier)
        self.label_11.setGeometry(QtCore.QRect(20, 50, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_11.setObjectName("label_11")
        self.rechercher = QtWidgets.QPushButton(self.gestio_modifier)
        self.rechercher.setGeometry(QtCore.QRect(530, 40, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.rechercher.setFont(font)
        self.rechercher.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.rechercher.setObjectName("rechercher")
        self.label_12 = QtWidgets.QLabel(self.gestio_modifier)
        self.label_12.setGeometry(QtCore.QRect(100, 130, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.nom_txt_mdf = QtWidgets.QLineEdit(self.gestio_modifier)
        self.nom_txt_mdf.setGeometry(QtCore.QRect(220, 120, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.nom_txt_mdf.setFont(font)
        self.nom_txt_mdf.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.nom_txt_mdf.setText("")
        self.nom_txt_mdf.setObjectName("nom_txt_mdf")
        self.prenom_txt_mdf = QtWidgets.QLineEdit(self.gestio_modifier)
        self.prenom_txt_mdf.setGeometry(QtCore.QRect(220, 180, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.prenom_txt_mdf.setFont(font)
        self.prenom_txt_mdf.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.prenom_txt_mdf.setText("")
        self.prenom_txt_mdf.setObjectName("prenom_txt_mdf")
        self.label_13 = QtWidgets.QLabel(self.gestio_modifier)
        self.label_13.setGeometry(QtCore.QRect(100, 190, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_13.setObjectName("label_13")
        self.modifier = QtWidgets.QPushButton(self.gestio_modifier)
        self.modifier.setGeometry(QtCore.QRect(320, 290, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.modifier.setFont(font)
        self.modifier.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.modifier.setObjectName("modifier")
        
        
        self.gestion.addTab(self.gestio_modifier, "")
        self.tabWidget.addTab(self.gestion_tab, "")
        #Historique
        self.historique_tab = QtWidgets.QWidget()
        self.historique_tab.setObjectName("historique_tab")
        self.label_3 = QtWidgets.QLabel(self.historique_tab)
        self.label_3.setGeometry(QtCore.QRect(160, 20, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAutoFillBackground(False)
        self.label_3.setStyleSheet("border-radius:16px;\n"
"background-color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        
        self.label_h = QtWidgets.QLabel(self.historique_tab)
        self.label_h.setGeometry(QtCore.QRect(50, 140, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.label_h.setFont(font)
        self.label_h.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_h.setObjectName("label_h")
        self.matricule_txt_historique = QtWidgets.QLineEdit(self.historique_tab)
        self.matricule_txt_historique.setGeometry(QtCore.QRect(190, 130, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.matricule_txt_historique.setFont(font)
        self.matricule_txt_historique.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.matricule_txt_historique.setObjectName("matricule_txt_historique")
        
        self.messageBrowser = QtWidgets.QTextBrowser(self.historique_tab)
        self.messageBrowser.setGeometry(QtCore.QRect(75, 180, 500, 271))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(11)
        self.messageBrowser.setFont(font)
        self.messageBrowser.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        self.messageBrowser.setObjectName("messageBrowser")
        
        self.historique_btn = QtWidgets.QPushButton(self.historique_tab)
        self.historique_btn.setGeometry(QtCore.QRect(500, 130, 90, 31))
        font = QtGui.QFont()
        font.setFamily("Oswald")
        font.setPointSize(12)
        self.historique_btn.setFont(font)
        self.historique_btn.setStyleSheet("border-radius:6px;\n"
"color: rgb(0,0,0);\n"
"background-color: rgb(255, 255, 255);")
        
        
        
        self.historique_btn.setObjectName("historique_btn")
        
        
        self.tabWidget.addTab(self.historique_tab, "")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.tabWidget)

        self.retranslateUi(principale)
        self.tabWidget.setCurrentIndex(2)
        self.gestion.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(principale)
        self.verifier.clicked.connect(self.verification)
        self.choisir.clicked.connect(self.choisirImage_verifier)
        self.choisir_ajt.clicked.connect(self.choisirImage)
        self.ajouter.clicked.connect(self.ajouterVoiture)
        self.modifier.clicked.connect(self.modifierVoiture)
        self.rechercher.clicked.connect(self.rechercher_btn)
        self.supprimer.clicked.connect(self.supprimerVoiture)
        self.historique_btn.clicked.connect(self.afficherHistorique)
        
    def retranslateUi(self, principale):
        _translate = QtCore.QCoreApplication.translate
        principale.setWindowTitle(_translate("principale", "Principale"))
        self.label.setText(_translate("principale", "  Vérification des voitures"))
        self.label_4.setText(_translate("principale", "   IP Caméra :"))
        self.choisir.setText(_translate("principale", "Choisir"))
        self.verifier.setText(_translate("principale", "Vérifier"))
        self.label_8.setText(_translate("principale", "   Image :"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.verification_tab), _translate("principale", "Vérification"))
        self.label_2.setText(_translate("principale", "  Géstion des voitures"))
        self.label_5.setText(_translate("principale", "   Nom :"))
        self.label_6.setText(_translate("principale", "   Prénom :"))
        self.label_7.setText(_translate("principale", "   Matricule :"))
        self.choisir_ajt.setText(_translate("principale", "Choisir"))
        self.ajouter.setText(_translate("principale", "Ajouter"))
        self.label_9.setText(_translate("principale", "   Image(matricule) :"))
        self.gestion.setTabText(self.gestion.indexOf(self.gestion_ajouter), _translate("principale", "Ajouter une voiture"))
        self.label_10.setText(_translate("principale", "   Matricule :"))
        self.supprimer.setText(_translate("principale", "Supprimer"))
        self.gestion.setTabText(self.gestion.indexOf(self.gestion_supprimer), _translate("principale", "Supprimer une voiture"))
        self.label_11.setText(_translate("principale", "  Rechercher Matricule :"))
        self.rechercher.setText(_translate("principale", "Rechercher"))
        self.label_12.setText(_translate("principale", "   Nom :"))
        self.label_13.setText(_translate("principale", "   Prénom :"))
        self.modifier.setText(_translate("principale", "Modifier"))
        self.gestion.setTabText(self.gestion.indexOf(self.gestio_modifier), _translate("principale", "Modifier une voiture"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.gestion_tab), _translate("principale", "Géstion"))
        self.label_3.setText(_translate("principale", "  Historique du Parking"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.historique_tab), _translate("principale", "Historique"))
        self.label_h.setText(_translate("principale","Matricule"))
        self.historique_btn.setText(_translate("principale","Historique"))
    
    def choisirImage(self):
        fname=QFileDialog.getOpenFileName(filter="(*.jpg , *.png)")[0]
        self.dossier_txt_ajt.setText(fname)
        print(fname)
    def choisirImage_verifier(self):
        fname=QFileDialog.getOpenFileName(filter="(*.jpg , *.png)")[0]
        self.dossier_txt.setText(fname)
    ##-------------------------------------------SIFT--------------------------------------------
    def Sift_detector(self,queries, licence):
        list_name = [file for file in glob.glob("matricules\*.png")]

        # Affichage de la voiture
        img2 = licence
        #plt.imshow(img2)
        #plt.show()
        index = 0

        # Creation de l'objet SIFT
        sift = cv.SIFT_create()

        # RGB To Gray scale
        gray_voiture = cv.cvtColor(licence, cv.COLOR_BGR2GRAY)

        # La detection des point d'interets et les descripteurs
        kp2, des2 = sift.detectAndCompute(gray_voiture, None)
        #print("Nombre de point Sift dans la voiture (len kp2) = ", len(kp2))
        #print("===========================================================")

        img3 = img2
        # parcourir tout l'ensemble des images des matricules et faire une comparaison a chaque fois

        #la liste des meilleurs matchings
        meilleur_good = []
        #variable qui va contenir le nombre max des Keypoints
        maxKp = 0
        # variable qui va contenir le nombre max des matchings
        maxgood = 0

        p = ""
        # Parcourir le dossier des plaques d'immatriculation
        for i in range(queries.shape[0]):

            # recuperer l'image de la matricule
            img1 = queries[i]
            gray_matricule = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)

            kp1, des1 = sift.detectAndCompute(gray_matricule, None)
            #print("Nombre de point Sift dans la matricule (len kp1) = ", len(kp1))

            bf = cv.BFMatcher()
            matches = bf.knnMatch(des1, des2, k=2)

            # Apply ratio test pour obtenir les bon matching
            good = []
            for m, n in matches:
                if m.distance < 0.6 * n.distance:
                    good.append([m])


            # Si on a obtenu un nombre de bon matching plus grand
            if (len(good) > maxgood):
                # mettre a jour maxgood(plus grand nb de bon matching)
                maxgood = len(good)
                # mettre a jour maxKp(plus grand nb de point sift détécté)
                maxKp = len(kp1)
                # Dessiner les appariements
                img3 = cv.drawMatchesKnn(img1, kp1, img2, kp2, good, None,
                                         flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

                #print("Plus grand nb de point sift détécté(max kp) = ", len(kp1))
                #print("Plus grand nb de bon matching(max good) = ", maxgood)
                #print("=================================================================")

                # sauvegarder les bon matching dans meilleur good
                meilleur_good = good
                index = i
            #print("===========================================================")
        #print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
        #print("=================================================================")
        #print("Taille meilleur good ", len(meilleur_good))
        #print("Max kp = ", maxKp)

        #variable qui va contenir le nombre des matchings reliée a un meme point d'interet
        nb_kifkif = 0
        for j in range(len(meilleur_good) - 1):
            x, y = kp2[meilleur_good[j][0].trainIdx].pt
            x1, y1 = kp2[meilleur_good[j + 1][0].trainIdx].pt

            # Si un meme point d'interet dans la voiture est matché a plusieurs autres points d'interets dans la matricule
            if (x == x1 and y == y1):
                nb_kifkif = nb_kifkif + 1

        #seuillage
        if ((nb_kifkif > len(meilleur_good) / 3) or len(meilleur_good) == 0):
            #print(" faux matching ! ")
            rep = "Voiture Non Autorisée"

        else:
            if (maxgood >= int(maxKp * 0.05)):
                #print(" bon matching ! ")
                rep="Voiture Autorisée"
                p = list_name[index]

            else:
                rep = "Voiture Non Autorisée"

        if rep == "Voiture Non Autorisée":
                
                self.ajouterhistorique(licence,p,False)
        elif rep == "Voiture Autorisée":
                self.ajouterhistorique(licence,p,True)   
        self.dossier_txt.setText("")
        self.ip_txt.setText("")
        plt.imshow(img3)
        plt.show()
        msg = QMessageBox()
        msg.setWindowTitle("VERIFICATION")
        msg.setText(rep)
        x = msg.exec_()
    ##---------------------------------Verification-----------------------------
    def verification(self):
        
        queries = [cv.imread(file) for file in glob.glob("matricules\*.png")]
        queries = np.array(queries)
        if(self.dossier_txt.text() != ""):
            print("taille querries",queries.shape)
            fname =self.dossier_txt.text()
            print("dossier : ",fname)
            img = cv.imread(fname)

        #plt.imshow(img)
        #plt.show()
            self.Sift_detector(queries,img)
        elif(self.ip_txt.text() != ""):
            url = self.ip_txt.text()+"/shot.jpg"
            print("IP Camera = ",url)

            try:
                while True:
                    img_resp = requests.get(url)
                    print(url)
                    img_arr = np.array(bytearray(img_resp.content), dtype=np.uint8)
                    img = cv.imdecode(img_arr, -1)
                    img = imutils.resize(img, width=900, height=1800)
                    cv.imshow("Camera Du Parking", img)
                    if cv.waitKey(1) == 27:
                        cv.imwrite('Camera_Images\output.jpg', img)
                        cv.destroyAllWindows()
                        licence = [cv.imread(file) for file in glob.glob("Camera_Images\*.jpg")]
                        self.Sift_detector(queries, licence[0])
                        break


            except:
                    print("IP Camera Invalide !")
                    self.dossier_txt.setText("")
                    self.ip_txt.setText("")
                    msg = QMessageBox()
                    msg.setWindowTitle("vérification")
                    msg.setText("IP Camera Invalide ! ")
                    x = msg.exec_()


        else:
            msg = QMessageBox()
            msg.setWindowTitle("vérification")
            msg.setText("Veuillez connecter votre camera ou bien choisir une image !")
            x = msg.exec_()
    
    ###
    def ajouterVoiture(self):
            list_of_elem = [self.nom_txt_ajt.text(),self.prenom_txt_ajt.text(),self.matricule_txt_ajt.text(),self.dossier_txt_ajt.text()]
            # Open file in append mode
            with open("bd.csv", 'a+', newline='') as write_obj:
                    # Create a writer object from csv module
                    csv_writer = csv.writer(write_obj)
                    
                    if self.exist(list_of_elem) == False and self.matricule_txt_ajt.text()!=""and self.nom_txt_ajt.text()!="" and self.prenom_txt_ajt.text()!=""and self.dossier_txt_ajt.text()!="":
                            # Add contents of list as last row in the csv file
                            csv_writer.writerow(list_of_elem)
                            img = cv.imread(self.dossier_txt_ajt.text())
                            
                            path = "matricules\ "+self.matricule_txt_ajt.text()+".png"
                            cv.imwrite(path, img)
                            self.matricule_txt_ajt.setText("")
                            self.nom_txt_ajt.setText("")
                            self.prenom_txt_ajt.setText("")
                            self.dossier_txt_ajt.setText("")
                            msg = QMessageBox()
                            msg.setWindowTitle("Ajout matricules")
                            msg.setText("Matricule ajoutée")
                            x = msg.exec_()
                    else:
                            print("existe deja")
                            self.matricule_txt_ajt.setText("")
                            self.nom_txt_ajt.setText("")
                            self.prenom_txt_ajt.setText("")
                            self.dossier_txt_ajt.setText("")
                            msg = QMessageBox()
                            msg.setWindowTitle("Ajout matricules")
                            msg.setText("Problem de matricules! veuillez bien remplir les champs !")
                            x = msg.exec_()
                            
    def exist(self, matricule):
            find = False
            with open("bd.csv","r") as csv_file:
                    csv_reader = csv.reader(csv_file)
                    for line in csv_reader:
                            if matricule[2] == line[2]:
                                    find = True
                                    break
            
            return find
    def exist_historique(self, heure):
            find = False
            with open("historique.csv","r") as csv_file:
                    csv_reader = csv.reader(csv_file)
                    for line in csv_reader:
                            if heure[4] == line[4]:
                                    find = True
                                    break
            
            return find
    def rechercher_btn(self):
            mat = self.matricule_txt_modifier.text()
            ret, indice = self.rechercher_fct(mat)
            if ret == True:
                    df = pd.read_csv("bd.csv",header=None)
                    self.nom_txt_mdf.setText(df.iloc[indice][0] )
                    self.prenom_txt_mdf.setText(df.iloc[indice][1])
            else:
                    self.matricule_txt_modifier.setText("")
                    msg = QMessageBox()
                    msg.setWindowTitle("Modification")
                    msg.setText("Matricule non existante")
                    x = msg.exec_()
                             
                        
    def rechercher_fct(self,matricule):
            find = False
            i = 0
            with open("bd.csv","r") as csv_file:
                    csv_reader = csv.reader(csv_file)
                    for line in csv_reader:
                            if matricule == line[2]:
                                    find = True
                                    break
                            else:
                                    i=i+1
            if find == True:
                    return True,i
            return False,i
                                    
            
    def modifierVoiture(self):
            i = 0
            find = False
            if self.nom_txt_mdf.text() != "" and self.prenom_txt_mdf.text() != "":
                    find= True
            else:
                    print("erruer")
                    msg = QMessageBox()
                    msg.setWindowTitle("Modification")
                    msg.setText("Veuillez bien remplir les champs ! ")
                    x = msg.exec_()
            if find == True:
                    ret, i = self.rechercher_fct(self.matricule_txt_modifier.text())
                    if ret == True:
                        df = pd.read_csv("bd.csv",header=None)
                        df.iloc[i][0] = self.nom_txt_mdf.text()
                        df.iloc[i][1] = self.prenom_txt_mdf.text()
                        df.to_csv("bd.csv",index=False,index_label=False,header=False)
                        self.nom_txt_mdf.setText("")
                        self.prenom_txt_mdf.setText("")
                        self.matricule_txt_modifier.setText("")
                        msg = QMessageBox()
                        msg.setWindowTitle("Modification")
                        msg.setText("Modification effectuée")
                        x = msg.exec_()
                    else:
                            print("Exoste pas")
                            self.nom_txt_mdf.setText("")
                            self.prenom_txt_mdf.setText("")
                            self.matricule_txt_modifier.setText("")
                            msg = QMessageBox()
                            msg.setWindowTitle("Modification")
                            msg.setText("Matricule non existante")
                            x = msg.exec_()
            
    def supprimerVoiture(self):
            
            ret, indice = self.rechercher_fct(self.matricule_txt_supp.text())
            if ret == True:
                    df = pd.read_csv("bd.csv",header=None)
                    df = df[df.iloc[:][2] != self.matricule_txt_supp.text()]
                    df.to_csv("bd.csv",index=False,index_label=False,header=False)
                    path = "matricules\ "+self.matricule_txt_supp.text()+".png"
                    file_to_rem = Path(path)
                    file_to_rem.unlink()
                    self.matricule_txt_supp.setText("")
                    msg = QMessageBox()
                    msg.setWindowTitle("Suppression")
                    msg.setText("Matricule supprimée")
                    x = msg.exec_()
            else:
                    print("on ne peut pas supprimer")
                    self.matricule_txt_supp.setText("")
                    msg = QMessageBox()
                    msg.setWindowTitle("Suppression")
                    msg.setText("Matricule non existante")
                    x = msg.exec_()
    def ajouterhistorique(self,image,matricule,autoriser):
            #list_of_elem = []
            print("mattt == ",Path(matricule).stem)
            nom=""
            prenom =""
            matricule_l=""
            statut = ""
            path = ""
            No_of_files = 0
            if autoriser == True:
                    ret,i = self.rechercher_fct(Path(matricule).stem.strip())
                    if ret == True:
                            print("dans la verif")
                            df = pd.read_csv("bd.csv",header=None)
                            nom=df.iloc[i][0]
                            
                            prenom =df.iloc[i][1] 
                            matricule_l=df.iloc[i][2]
                            statut = "acces permis"
                            #print("mattt == ",Path(matricule).stem) 
                            #list_of_elem = [nom,prenom,matricule,datetime.date(datetime.now()),datetime.time(datetime.now())]
                            
            else:
                    nom="inconnue"
                    prenom ="inconnue"
                    matricule_l="inconnue"
                    statut = "status non permis" 
            list_of_elem = [nom,prenom,matricule_l,date.today(),datetime.time(datetime.now()),statut]
                    
            # Open file in append mode
            with open("historique.csv", 'a+', newline='') as write_obj:
                    # Create a writer object from csv module
                    csv_writer = csv.writer(write_obj)
                    if autoriser == True:
                            # Si la voiture est autorisé
                            csv_writer.writerow(list_of_elem)
                    else:
                            #print("ecrit")
                            csv_writer.writerow(list_of_elem)
                            d = str(date.today())
                            print(type(d))
                            No_of_files = len(os.listdir("NonAutorise"))
                                    
                            
                            path = "NonAutorise\ "+d+"_"+str(No_of_files)+".png"
                            cv.imwrite(path, image)
    def afficherHistorique(self):
            self.messageBrowser.setText("")
            msg=""
            nom=""
            prenom=""
            matricule=""
            date=""
            heure=""
            status=""
            df = pd.read_csv("historique.csv")
            if self.matricule_txt_historique.text()=="":
                    df = pd.read_csv("historique.csv")
                    lines = df.shape[0]
                    for i in range(lines):
                            #msg=msg+str(df.iloc[i][:]+"\n")
                            nom = "Nom: "+df.iloc[i][0]+"\n"
                            prenom = "Prenom: "+df.iloc[i][1]+"\n"
                            matricule = "Matricule: "+df.iloc[i][2]+"\n"
                            date = "Date: "+df.iloc[i][3]+"\n"
                            heure = "Heure: "+df.iloc[i][4]+"\n"
                            status = "Status: "+df.iloc[i][5]+"\n"
                            msg = msg +nom+prenom+matricule+date+heure+status+"\n"
            else:
                    #cherhcer la matricule
                    ret,i = self.rechercher_fct(self.matricule_txt_historique.text())
                    if ret == True:
                            for j in range(df.shape[0]):
                                    if df.iloc[j][2] == self.matricule_txt_historique.text():
                                            nom = "Nom: "+df.iloc[j][0]+"\n"
                                            prenom = "Prenom: "+df.iloc[j][1]+"\n"
                                            matricule = "Matricule: "+df.iloc[j][2]+"\n"
                                            date = "Date: "+df.iloc[j][3]+"\n"
                                            heure = "Heure: "+df.iloc[j][4]+"\n"
                                            status = "Status: "+df.iloc[j][5]+"\n"
                                    msg = msg +nom+prenom+matricule+date+heure+status+"\n"
                    else:
                            self.matricule_txt_historique.setText("")
                            msg_erreur = QMessageBox()
                            msg_erreur.setWindowTitle("Hitorique")
                            msg_erreur.setText("Matricule non existante")
                            x = msg_erreur.exec_()
                            
            self.messageBrowser.setText(msg)
            
            

#921 05 37846
